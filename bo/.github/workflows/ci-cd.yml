name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'v1'

jobs:
  # Test and Build Backend
  backend-test:
    name: Backend Tests & Build
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: borderless_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install backend dependencies
        working-directory: ./server
        run: npm ci

      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -ptest_password --silent; do
            sleep 1
          done

      - name: Run backend tests
        working-directory: ./server
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: test_password
          DB_NAME: borderless_test
          SESSION_SECRET: test_session_secret
          JWT_SECRET: test_jwt_secret
        run: |
          echo "Backend tests would run here"
          # npm test

      - name: Check backend code quality
        working-directory: ./server
        run: |
          echo "Linting backend code..."
          # npm run lint

  # Test and Build Frontend
  frontend-test:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./client
        run: npm ci

      - name: Run frontend linting
        working-directory: ./client
        run: npm run lint

      - name: Run frontend tests
        working-directory: ./client
        run: |
          echo "Frontend tests would run here"
          # npm test

      - name: Build frontend for production
        working-directory: ./client
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'http://localhost:4000' }}
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: client/dist/
          retention-days: 7

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit (Backend)
        working-directory: ./server
        run: npm audit --audit-level=moderate

      - name: Run security audit (Frontend)
        working-directory: ./client
        run: npm audit --audit-level=moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: client/dist/

      - name: Deploy to Staging
        env:
          STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
        run: |
          echo "Deploying to staging server..."
          # Add deployment script here

      - name: Run staging health checks
        run: |
          echo "Running health checks..."
          # curl -f ${{ secrets.STAGING_URL }}/api/health

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: client/dist/

      - name: Deploy to Production
        env:
          PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
          PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
          PRODUCTION_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
        run: |
          echo "Deploying to production server..."
          # Add production deployment script

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # curl -f ${{ secrets.PRODUCTION_URL }}/api/health

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful!"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"

  # Database Backup (runs daily)
  database-backup:
    name: Database Backup
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Backup Production Database
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
        run: |
          echo "Creating database backup..."
          # mysqldump -h$DB_HOST -u$DB_USER -p$DB_PASSWORD $DB_NAME > backup-$(date +%Y%m%d-%H%M%S).sql
          # aws s3 cp backup-$(date +%Y%m%d-%H%M%S).sql s3://$S3_BUCKET/database-backups/